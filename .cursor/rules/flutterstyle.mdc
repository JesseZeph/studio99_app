---
description: Code Style and Conventions Standards for Flutter
globs: 
alwaysApply: false
---
# Code Style and Conventions Standards for Flutter

This document outlines the code style and conventions to be followed when developing Flutter applications. Adhering to these standards improves code readability, maintainability, collaboration, and overall project quality. These standards incorporate the latest Flutter best practices and guidelines.

## 1. Formatting

Consistent formatting is crucial for readability. Flutter uses Dart's formatting rules, typically enforced by the Dart analyzer and formatter. Configure your IDE to automatically format code on save.

### 1.1. Whitespace

*   **Do This:** Use consistent whitespace for indentation and separation of code elements. Use 2 spaces for indentation.
*   **Don't Do This:** Use tabs for indentation or inconsistent numbers of spaces.

"""dart
// Do This
void main() {
  print('Hello, Flutter!');
  if (true) {
    print('Condition is true');
  }
}

// Don't Do This
void main() {
	print('Hello, Flutter!');
	if (true)
		{
			print('Condition is true');
		}
}
"""

*   **Why?** Consistent whitespace makes code easier to scan and understand, reducing cognitive load for developers.

### 1.2. Line Length

*   **Do This:** Aim for a maximum line length of 80-120 characters. Break lines appropriately to maintain readability.
*   **Don't Do This:** Allow lines to become excessively long, requiring horizontal scrolling.

"""dart
// Do This
void main() {
  final veryLongVariableName = 'This is a very long string that '
      'needs to be broken into multiple lines to maintain readability.';
  print(veryLongVariableName);
}

// Don't Do This
void main() {
  final veryLongVariableName = 'This is a very long string that needs to be broken into multiple lines to maintain readability.';
  print(veryLongVariableName);
}
"""

*   **Why?** Shorter lines are easier to read, especially on smaller screens or when code is displayed side-by-side (e.g., in diff views).

### 1.3. Trailing Commas

*   **Do This:** Use trailing commas in function arguments, list literals, and map literals.
*   **Don't Do This:** Omit trailing commas, especially in multi-line constructs.

"""dart
// Do This
void myFunction({
  required String param1,
  required int param2,
}) {
  final myList = [
    'item1',
    'item2',
  ];
  final myMap = {
    'key1': 'value1',
    'key2': 'value2',
  };
}

// Don't Do This
void myFunction({
  required String param1,
  required int param2
}) {
  final myList = [
    'item1',
    'item2'
  ];
  final myMap = {
    'key1': 'value1',
    'key2': 'value2'
  };
}
"""

*   **Why?** Trailing commas simplify version control diffs and make adding new elements easier.

### 1.4. File Structure

*   **Do This:** Organize files into logical directories.  Follow a consistent naming convention for files (e.g., "my_widget.dart", "my_service.dart").  Prefer features-first organizational structure.
*   **Don't Do This:** Dump all files into a single directory or use inconsistent file names.

"""
my_app/
├── lib/
│   ├── features/
│   │   ├── authentication/
│   │   │   ├── data/
│   │   │   │   ├── auth_repository.dart
│   │   │   ├── presentation/
│   │   │   │   ├── login_screen.dart
│   ├── core/
│   │   ├── widgets/
│   │   │   ├── custom_button.dart
│   ├── app.dart
│   ├── main.dart
"""

*   **Why?** A well-structured project is easier to navigate, understand, and maintain.

## 2. Naming Conventions

Clear and consistent naming is essential for code clarity.

### 2.1. Types

*   **Do This:** Use "UpperCamelCase" for class names, enums, typedefs, and extensions.
*   **Don't Do This:** Use "snake_case" or "lowerCamelCase" for type names.

"""dart
// Do This
class MyWidget extends StatelessWidget { ... }

enum MyEnum { value1, value2 }

typedef IntCallback = void Function(int value);

extension StringExtension on String { ... }

// Don't Do This
class my_widget extends StatelessWidget { ... }
"""

*   **Why?** "UpperCamelCase" clearly distinguishes types from variables and functions.

### 2.2. Variables and Functions

*   **Do This:** Use "lowerCamelCase" for variable names, function names, and method names.
*   **Don't Do This:** Use "UpperCamelCase" or "snake_case" for these names.

"""dart
// Do This
int myVariable = 0;

void myFunction() { ... }

class MyClass {
  void myMethod() { ... }
}

// Don't Do This
int MyVariable = 0;
void my_function() { ... }
"""

*   **Why?**  "lowerCamelCase" is the standard convention for variables and functions in Dart and many other languages.

### 2.3. Constants

*   **Do This:** Use "lowerCamelCase" for constant variable names. Use "UPPER_SNAKE_CASE" for compile-time constants (declared with "const").
*   **Don't Do This:** Use inconsistent casing for constants.

"""dart
// Do This
const int myConstant = 10;
final int myFinalVariable = 20; // Runtime constant.
const MY_COMPILE_TIME_CONSTANT = 30; // Use for XML/JSON keys as well.

// Don't Do This
const int Myconstant = 10;
"""

*   **Why?** Distinguishes compile-time constants, which are inlined by the compiler, from runtime constants.

### 2.4. Private Members

*   **Do This:** Prefix private members (variables and methods) with an underscore ("_").
*   **Don't Do This:** Use other conventions to indicate privacy.

"""dart
// Do This
class MyClass {
  int _myPrivateVariable = 0;

  void _myPrivateMethod() { ... }
}

// Don't Do This
class MyClass {
  int myPrivateVariable = 0;

  void myPrivateMethod() { ... }
}
"""

*   **Why?** The underscore is Dart's built-in mechanism for enforcing privacy at the library level.

### 2.5. Widget Naming

*   **Do This:** Suffix widget names with "Widget".
*   **Don't Do This:** Omit the "Widget" suffix, especially for complex or reusable widgets.

"""dart
// Do This
class MyCustomButtonWidget extends StatelessWidget { ... }

// Don't Do This (less clear, may be confused with a data class)
class MyCustomButton extends StatelessWidget { ... }
"""

*   **Why?** Clearly identifies classes that extend "StatelessWidget" or "StatefulWidget".

## 3. Stylistic Consistency

Maintain a consistent style throughout the codebase to improve readability and reduce cognitive load.

### 3.1. Immutability

*   **Do This:** Prefer immutable data structures and widgets whenever possible. Use "const" constructors for widgets that don't need to rebuild.
*   **Don't Do This:** Mutate state unnecessarily.

"""dart
// Do This
class MyImmutableWidget extends StatelessWidget {
  const MyImmutableWidget({Key? key, required this.data}) : super(key: key);

  final String data;

  @override
  Widget build(BuildContext context) {
    return Text(data);
  }
}

// Usage:
const myWidget = MyImmutableWidget(data: 'Hello');
"""

*   **Why?** Immutable widgets and data structures improve performance by reducing unnecessary rebuilds and simplify state management. The "const" keyword signals the compiler that the widget can be safely cached and reused.

### 3.2. Explicit Types

*   **Do This:** Explicitly declare data types for variables and function return types, except where Dart's type inference is obvious (e.g., inside a builder function).
*   **Don't Do This:** Rely solely on "var" or "dynamic" unless necessary.

"""dart
// Do This
String myString = 'Hello';
int myInt = 10;

String myFunction(): {
  return 'Hello';
}

// Example where type inference is okay within a builder method
Widget build(BuildContext context) {
  return ListView.builder(itemBuilder: (context, index) {
    final item = items[index]; // Type of 'item' is inferred from items[index]
    return Text(item);
  });
}


// Don't Do This (less clear, especially for complex types)
var myString = 'Hello';
dynamic myVariable = 10;
"""

*   **Why?** Explicit types improve code clarity and help the Dart analyzer catch type-related errors early.

### 3.3. Comments and Documentation

*   **Do This:** Write clear and concise comments to explain complex logic or non-obvious behavior. Use doc comments ("///") to document classes, functions, and parameters.
*   **Don't Do This:** Write unnecessary or redundant comments. Let the code speak for itself when possible.

"""dart
// Do This
/// A widget that displays a user's profile picture.
class ProfilePictureWidget extends StatelessWidget {
  /// The URL of the profile picture.
  final String imageUrl;

  const ProfilePictureWidget({Key? key, required this.imageUrl}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Load the image from the network.
    return Image.network(imageUrl);
  }
}

// Bad comment: redundant
// Returns the user's name.
String getUserName() {
  return _userName;
}
"""

*   **Why?** Good comments explain the *why* behind the code, while doc comments provide API documentation.

### 3.4. Widget Composition

*   **Do This:** Break down complex widgets into smaller, reusable components. Use composition over inheritance.
*   **Don't Do This:** Create monolithic widgets that are difficult to understand and maintain.

"""dart
// Do This (composition)
class MyComplexWidget extends StatelessWidget {
  const MyComplexWidget({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        _buildHeader(),
        _buildBody(),
        _buildFooter(),
      ],
    );
  }

  Widget _buildHeader() {
    return Text('Header');
  }

  Widget _buildBody() {
    return Text('Body');
  }

  Widget _buildFooter() {
    return Text('Footer');
  }
}

// Don't Do This (monolithic widget - harder to test/reuse individual parts)
class MyComplexWidget extends StatelessWidget {
  const MyComplexWidget({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text('Header'),
        Text('Body'),
        Text('Footer'),
      ],
    );
  }
}


"""

*   **Why?** Smaller components are easier to reason about, test, and reuse.

### 3.5. Error Handling

*   **Do This:** Use "try-catch" blocks to handle potential exceptions. Log errors appropriately. Provide user-friendly error messages.
*   **Don't Do This:** Ignore exceptions or display technical error messages to the user.

"""dart
// Do This
Future<void> fetchData() async {
  try {
    final response = await http.get(Uri.parse('https://example.com/data'));
    if (response.statusCode == 200) {
      // Process data
    } else {
      throw Exception('Failed to load data');
    }
  } catch (e) {
    print('Error fetching data: $e');
    // Show user-friendly error message
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Failed to load data. Please try again later.')),
    );
  }
}

// Don't Do This
Future<void> fetchData() async {
  final response = await http.get(Uri.parse('https://example.com/data'));
  // No error handling
}
"""

*   **Why?** Robust error handling prevents unexpected crashes and provides a better user experience.

## 4. Modern Best Practices

Embrace modern Flutter features and patterns for more efficient and maintainable code.

### 4.1. Null Safety

*   **Do This:** Use null safety features ("?", "!", "late", "required") to prevent null pointer exceptions. Migrate existing code to null safety.
*   **Don't Do This:** Ignore null safety or use "!" excessively.

"""dart
// Do This
class MyClass {
  String? myNullableString; // Can be null
  late String myLateString; // Initialized later, but not nullable
  String myNonNullableString;

  MyClass({required this.myNonNullableString});

  void initialize() {
    myLateString = 'Initialized';
  }
}

// Don't Do This (using ! without careful consideration)
String getName() {
  return myNullableString!.toUpperCase(); // Could throw an exception if myNullableString is null
}
"""

*   **Why?** Null safety makes code more reliable and reduces the risk of runtime errors.

### 4.2. Functional Programming

*   **Do This:** Use functional programming techniques (e.g., "map", "where", "reduce") to manipulate collections.
*   **Don't Do This:** Use imperative loops unnecessarily.

"""dart
// Do This (functional)
final numbers = [1, 2, 3, 4, 5];
final evenNumbers = numbers.where((number) => number % 2 == 0).toList();
final doubledNumbers = numbers.map((number) => number * 2).toList();

// Don't Do This (imperative)
final evenNumbers2 = <int>[];
for (var number in numbers) {
  if (number % 2 == 0) {
    evenNumbers2.add(number);
  }
}
"""

*   **Why?** Functional code is often more concise, readable, and less prone to errors.

### 4.3. Asynchronous Programming

*   **Do This:** Use "async"/"await" for asynchronous operations. Handle errors appropriately.
*   **Don't Do This:** Use ".then()" callbacks excessively, leading to callback hell.

"""dart
// Do This (async/await)
Future<String> fetchData() async {
  try {
    final response = await http.get(Uri.parse('https://example.com/data'));
    return response.body;
  } catch (e) {
    print('Error: $e');
    return 'Error';
  }
}

// Don't Do This (callback hell)
Future<String> fetchData2() {
  return http.get(Uri.parse('https://example.com/data')).then((response) {
    return response.body;
  }).catchError((error) {
    print('Error: $error');
    return 'Error';
  });
}
"""

*   **Why?** "async"/"await" makes asynchronous code easier to read and write, resembling synchronous code.

### 4.4. State Management

*   **Do This:** Choose a state management solution appropriate for the app's complexity (e.g., Provider, Riverpod, BLoC, GetX). Use "ValueNotifier" or "ChangeNotifier" for simple cases.
*   **Don't Do This:** Overuse "setState" for complex state management or reinvent the wheel.

"""dart
// Simple state management with ValueNotifier
class Counter {
  final count = ValueNotifier<int>(0);

  void increment() {
    count.value++;
  }
}

// Usage in a widget
class CounterWidget extends StatelessWidget {
  final counter = Counter();

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<int>(
      valueListenable: counter.count,
      builder: (context, value, child) {
        return Text('Count: $value');
      },
    );
  }
}
"""

*   **Why?**  Proper state management is crucial for building scalable and maintainable Flutter applications.  Avoid scattering "setState" calls throughout your code, which can lead to unpredictable behavior and performance issues.  Choose the simplest state management solution that meets your needs.

### 4.5. Lints

*   **Do This:** Enable strong linting rules in "analysis_options.yaml". Follow the recommended lints for Flutter projects.
*   **Don't Do This:** Ignore linting warnings or disable essential lints.

"""yaml
# analysis_options.yaml
include: package:flutter_lints/flutter.yaml

linter:
  rules:
    avoid_print: true # Example:  Disallow "print" statements in production code
    prefer_const_constructors: true
    always_put_required_named_parameters_first: true
    sort_child_properties_last: true

analyzer:
  exclude:
    - "**/*.g.dart" # Exclude generated files
"""

*   **Why?** Lints enforce best practices and help catch potential errors early in the development process.

By adhering to these code style and convention standards, Flutter developers can create high-quality, maintainable, and collaborative applications.  This will improve the overall performance ,security, and readability of all applications within the codebase and simplify long-term development.
